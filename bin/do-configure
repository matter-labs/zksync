#!/bin/bash
. .setup_env

# # Main cluster
# NAME=$CLUSTER_NAME
# CLUSTER=`echo $CLUSTERS | jq '.kubernetes_clusters | map(select(.name == "'$NAME'")) | .[0]'`
# CLUSTER_ID=`echo $CLUSTER | jq '.id' | tr -d '"' | grep -v null`
# CURRENT_COUNT=`echo $CLUSTER | jq '.node_pools[0] | .count' | grep -v null`
# NODE_POOL_ID=`echo $CLUSTER | jq '.node_pools[0] | .id' | grep -v null | tr -d '"'`
# DATA='{ "name": "prover", "count": 30}'
# echo $CLUSTER_ID $NODE_POOL_ID $DATA
# RET=`do-curl -X PUT "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/node_pools/$NODE_POOL_ID" --data "$DATA"`
# echo $RET

# . bin/.kube_gen_secret | kubectl apply -f - || exit 1
# kubectl apply -f etc/kube/prover.yaml || exit 1
# kubectl scale deployments/prover --replicas=$COUNT_PER_REGION || exit 1

PROVISIONED=0

CLUSTERS=`do-curl -X GET "https://api.digitalocean.com/v2/kubernetes/clusters"`
CLUSTERS_IDS=`echo $CLUSTERS | jq '.kubernetes_clusters | map(.id) | .[]'  | tr -d '"' | grep -v null`

mkdir -p etc/kube/clusters

echo "Target: $COUNT_PER_REGION per region"

# CLUSTERS_IDS="44d52456-f37c-494e-878c-142881db90f3"
# COUNT_PER_REGION=

for CLUSTER_ID in $CLUSTERS_IDS; do
    CLUSTER=`echo $CLUSTERS | jq '.kubernetes_clusters | map(select(.id == "'$CLUSTER_ID'")) | .[0]'`
    NAME=`echo $CLUSTER | jq '.name' | tr -d '"'`

    # if [ "$NAME" == "main" ]; then
    #     continue
    # fi

    PROVER_POOL=`echo $CLUSTER | jq '.node_pools | map(select(.name == "prover")) | .[0]'`
    NODE_POOL_ID=`echo $PROVER_POOL | jq '.id' | grep -v null | tr -d '"'`
    CURRENT_COUNT=`echo $PROVER_POOL | jq '.count'`

    echo "Cluster $NAME, id = $CLUSTER_ID, NODE_POOL_ID = $NODE_POOL_ID, current_count = $CURRENT_COUNT"
    
    KUBECONFIG=etc/kube/clusters/kubeconfig-$NAME.yaml

    if [[ ! "" == "$COUNT_PER_REGION" ]]; then
        DATA='{ "size": "c-32", "name": "prover", "count": '$COUNT_PER_REGION'}'
        echo $DATA
        RET=`do-curl -X PUT "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/node_pools/$NODE_POOL_ID" --data "$DATA"`
        echo $RET
    
        do-curl -X GET "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" > $KUBECONFIG
    fi

    # Generate and apply secret for env config
    . bin/k8s-secret | kubectl apply -f -

    kubectl apply -f etc/kube/gen/$FRANKLIN_ENV/prover.yaml
    kubectl scale deployments/$FRANKLIN_ENV-prover --replicas=$ACTIVE_PER_REGION

    # if [ ! "$NAME" == "main" ]; then
    #     kubectl delete deployments/$FRANKLIN_ENV-nginx
    #     kubectl delete deployments/$FRANKLIN_ENV-server
    # fi

    echo

    # PROVISIONED=$((PROVISIONED + COUNT_PER_REGION))
    # if ((PROVISIONED >= COUNT_TOTAL)) 
    # then
    #     echo "provisioned $PROVISIONED, enough!"
    #     exit 0
    # fi
done

