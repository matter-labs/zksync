name: Setup
on:
  workflow_call:
    inputs:
      environment:
        description: zkSync Environment (mainnet, stage, rinkeby etc)
        type: string
        required: true
      create-deployment:
        description: Create GitHub deployment for the given environment
        type: boolean
        required: false
        default: false
      find-latest-config:
        description: Find the latest config tag (-rN) for the given version
        type: boolean
        required: false
        default: false
    secrets:
      github-token:
        description: GitHub token
        required: false
    outputs:
      environment:
        description: zkSync Environment
        value: ${{ inputs.environment }}
      release-environment:
        description: Helmfile release environment
        value: ${{ jobs.setup.outputs.hfEnv }}
      release-namespace:
        description: Helmfile/Helm release namespace (usually matches the environment)
        value: ${{ jobs.setup.outputs.namespace }}
      cluster:
        description: Runtime cluster label, i.e. self-hosted runner label (mainnet, testnet or stage)
        value: ${{ jobs.setup.outputs.cluster }}
      sha-short:
        description: Short SHA used for image tagging
        value: ${{ jobs.setup.outputs.sha-short }}
      deployment-id:
        description: GitHub Deployment ID, a non-empty value when setup handles the deployment creation
        value: ${{ jobs.setup.outputs.deployment-id }}
      config-tag:
        description: Latest config tag for the given release (accounts -rN suffix)
        value: ${{ jobs.setup.outputs.config-tag }}

defaults:
  run:
    shell: bash -leo pipefail {0}

# Disable simultaneous deployments into a single environment
concurrency: setup-env-${{ inputs.environment }}

jobs:
  setup:
    name: Runtime
    runs-on: [matterlabs-deployer-stage]
    outputs:
      hfEnv: ${{ steps.envMap.outputs.hfEnv }}
      namespace: ${{ steps.envMap.outputs.namespace }}
      cluster: ${{ steps.envMap.outputs.cluster }}
      sha-short: ${{ steps.sha.outputs.short }}
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      config-tag: ${{ steps.latest-config.outputs.tag }}

    steps:
      - uses: actions/checkout@v2
      - name: Map runtime environment data
        id: envMap
        uses: kanga333/variable-mapper@v0.2.2
        with:
          key: ${{ inputs.environment }}
          export_to: output
          mode: overwrite
          map: |
            {
              ".*": {
                "namespace": "${{ inputs.environment }}",
                "hfEnv": "${{ inputs.environment }}",
                "cluster": "stage"
              },
              "^goerli$": { "cluster": "testnet-new" },
              "^mainnet$": { "cluster": "mainnet", "hfEnv": "prod", "namespace": "zksync" }
            }
      - run: echo "::set-output name=short::$(git rev-parse --short HEAD)"
        id: sha
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        if: inputs.create-deployment
        with:
          token: ${{ github.token }}
          environment: ${{ inputs.environment }}
      - name: Match the tag vX.Y.Z-rN pattern
        uses: actions-ecosystem/action-regex-match@v2
        id: regex
        with:
          text: ${{ github.ref }}
          regex: '^(v\d+\.\d+\.\d+)(-r\d+)?$'
      - name: Find the latest config "-rN" tag
        uses: dysnix/find-latest-tag@v2
        if: inputs.find-latest-config && steps.regex.outputs.match != ''
        id: latest-config
        with:
          prefix: ${{ steps.regex.outputs.group1 }}
          regex: ^${{ steps.regex.outputs.group1 }}(-r\d+)?$
          token: ${{ secrets.github-token }}
          repository: matter-labs/configs
