name: CI

on:
  pull_request:
  push:
    branches:
      - staging
      - trying

jobs:
  lint:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: setup-env
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml up --build -d zk
          ci_run sccache --start-server

      - name: setup-env
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH

      - name: lints
        run: |
          ci_run zk
          ci_run zk fmt --check
          ci_run zk lint --check

  unit-tests:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: setup-env
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml pull
          docker-compose -f docker-compose-runner.yml up --build -d geth postgres zk
          ci_run sccache --start-server

      - name: init
        run: |
          ci_run ln -s /usr/src/keys/setup keys/setup
          ci_run zk
          ci_run zk run yarn
          ci_run zk run verify-keys unpack
          ci_run yarn run build:zksync-sdk
          ci_run zk contract build
          ci_run zk run deploy-erc20 dev
          ci_run zk run deploy-eip1271
          ci_run zk db basic-setup

      - name: restart dev-liquidity-token-watcher and dev-ticker
        run: docker-compose -f docker-compose-runner.yml restart dev-liquidity-token-watcher dev-ticker

      - name: contracts-unit-tests
        run: ci_run zk test contracts

      - name: js-unit-tests
        run: ci_run zk test js

      - name: rust-unit-tests
        run: ci_run zk test server-rust

  integration:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: setup-env
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml pull
          docker-compose -f docker-compose-runner.yml up --build -d geth postgres zk
          ci_run sccache --start-server

      - name: init
        run: |
          ci_run ln -s /usr/src/keys/setup keys/setup
          ci_run zk
          ci_run zk dummy-prover enable --no-redeploy
          ci_run zk init

      - name: restart dev-liquidity-token-watcher and dev-ticker
        run: docker-compose -f docker-compose-runner.yml restart dev-liquidity-token-watcher dev-ticker

      - name: run-services
        run: |
          ci_run zk server core &>server.log &
          ci_run zk server api &>api.log &
          ci_run sleep 10
          ci_run zk dummy-prover run &>dummy_prover.log &
          ci_run sleep 100

      - name: integration-server
        run: ci_run zk test i server

      - name: integration-api
        run: |
          ci_run zk test i api
          ci_run zk test i api-docs

      - name: integration-rust-sdk
        run: ci_run zk test i rust-sdk

      - name: integration-withdrawal-helpers
        run: ci_run zk test i withdrawal-helpers

      - name: Show logs
        if: always()
        run: |
          ci_run cat server.log
          ci_run cat api.log
          ci_run cat dummy_prover.log

  circuit-tests:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: prepare
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml pull
          docker-compose -f docker-compose-runner.yml up --build -d geth postgres zk
          ci_run sccache --start-server

      - name: init
        run: |
          ci_run ln -s /usr/src/keys/setup keys/setup
          ci_run zk
          ci_run zk run verify-keys unpack

      - name: circuit-tests
        run: ci_run zk test circuit 20

  testkit:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: prepare
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo PLUGIN_CONFIG=fast >> $GITHUB_ENV # use fast mode for geth image (instant tx commit)
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml pull
          docker-compose -f docker-compose-runner.yml up --build -d zk
          ci_run sccache --start-server

      - name: init
        run: |
          ci_run ln -s /usr/src/keys/setup keys/setup
          ci_run zk
          ci_run zk run verify-keys unpack
          ci_run zk contract build

      - name: integration-testkit
        run: ci_run zk test integration testkit --offline

  revert-blocks:
    runs-on: [matterlabs-ci-runner]

    steps:
      - uses: actions/checkout@v2

      - name: setup-env
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          ## Setup sccache GCS key (update docker-compose .env)
          SCCACHE_TEMP=$(echo `mktemp -d`)/sa_key.json; echo $SCCACHE_CGS_KEY > $SCCACHE_TEMP
          echo "HOST_GCS_KEY_PATH=$SCCACHE_TEMP" >> .env

      - name: start-services
        run: |
          docker-compose -f docker-compose-runner.yml down
          docker-compose -f docker-compose-runner.yml pull
          docker-compose -f docker-compose-runner.yml up --build -d geth postgres zk
          ci_run sccache --start-server

      - name: init
        run: |
          ci_run ln -s /usr/src/keys/setup keys/setup
          ci_run zk
          ci_run zk dummy-prover enable --no-redeploy
          ci_run zk init

      - name: restart dev-liquidity-token-watcher and dev-ticker
        run: docker-compose -f docker-compose-runner.yml restart dev-liquidity-token-watcher dev-ticker

      - name: run-services
        run: |
          ci_run zk server core &>server.log &
          ci_run zk server api &>api.log &
          ci_run sleep 10

      - name: loadtest
        run: |
          ci_run cargo build --release --bin loadnext 
          cd $ZKSYNC_HOME
          docker-compose -f docker-compose-runner.yml exec -T -e ALLOWED_PERCENT=20 -e RUST_LOG=loadnext=debug -e ZKSYNC_RPC_ADDR=http://127.0.0.2:3030 -e WEB3_URL=http://geth:8545 -e ETH_NETWORK=localhost -e MASTER_WALLET_PK=74d8b3a188f7260f67698eb44da07397a298df5427df681ef68c45b34b61f998 -e ACCOUNTS_AMOUNT=5 -e OPERATIONS_PER_ACCOUNT=5 -e MAIN_TOKEN=DAI zk ./target/release/loadnext
          docker-compose -f docker-compose-runner.yml exec -T -e ZKSYNC_REST_ADDR=http://127.0.0.2:3001  zk ts-node core/tests/check-block-root-hahes.ts

      - name: stop-server
        run: |
          ci_run killall zksync_server

      - name: revert-blocks
        run: |
          ci_run zk f cargo build --release --bin block_revert
          ci_run zk f ./target/release/block_revert --last-correct-block=2 all
      - name: check-server
        run: |
          ci_run zk server &>server.log &
          ci_run sleep 30
          docker-compose -f docker-compose-runner.yml exec -T -e ZKSYNC_REST_ADDR=http://127.0.0.2:3001  zk ts-node core/tests/check-block-root-hahes.ts

      - name: Show logs
        if: always()
        run: |
          ci_run cat server.log
          ci_run cat api.log

  notify:
    if: always() && !cancelled()
    name: Notify on failures
    runs-on: ubuntu-latest
    needs:
      [lint, unit-tests, integration, circuit-tests, testkit, revert-blocks]
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      -
        name: Notify to Mattermost (on incidents)
        uses: tferreira/matterfy@releases/v1
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        with:
          type: failure
          job_name: '*CI suites for PR #${{ github.event.pull_request.number }} failed*'
          icon_emoji: octocat
          channel: 'ci-notifications'
          url: ${{ secrets.MATTERMOST_WEBHOOK }}
